// generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (tm TokenMap) Id(tok Type) string {
	if int(tok) < len(tm.typeMap) {
		return tm.typeMap[tok]
	}
	return "unknown"
}

func (tm TokenMap) Type(tok string) Type {
	if typ, exist := tm.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (tm TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", tm.Id(tok.Type), tok.Type, tok.Lit)
}

func (tm TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", tm.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"arg",
		"func",
		"var",
	},

	idMap: map[string]Type{
		"INVALID": 0,
		"$":       1,
		"arg":     2,
		"func":    3,
		"var":     4,
	},
}
